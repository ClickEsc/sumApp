{"version":3,"file":"component---src-pages-login-js-aad7b2cae1bf4a02a473.js","mappings":"4JAqIA,IA9HkB,WAChB,OAAgCA,EAAAA,EAAAA,UAAS,CACvCC,MAAO,GACPC,SAAU,GACVC,WAAY,CACVF,MAAO,GACPC,SAAU,IAEZE,cAAc,EACdC,iBAAiB,EACjBC,aAAa,IATRC,EAAP,KAAiBC,EAAjB,KAWA,GAAkDR,EAAAA,EAAAA,WAAS,GAApDS,EAAP,KAA0BC,EAA1B,KACMC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAmBD,EAAAA,EAAAA,UAMnBE,EAAkB,SAACC,GAAO,IAAD,EACvBC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACjBC,EAAoBC,EAAcJ,EAAME,GAC9CV,EAAY,OAAD,UAAKD,IAAL,MAAgBS,GAAOE,EAAvB,GAAiCC,KAGxCC,EAAgB,SAACC,EAAWH,GAChC,IAAMI,EAAwBf,EAASJ,WACnCC,EAAeG,EAASH,aACxBC,EAAkBE,EAASF,gBAE/B,OAAOgB,GACL,IAAK,QACHjB,EAAec,EAAMK,MAAM,wCAC3BD,EAAsBrB,MAAQG,EAAe,GAAK,2BAClD,MACF,IAAK,WACHC,EAAkBa,EAAMM,QAAU,EAClCF,EAAsBpB,SAAWG,EAAkB,GAAI,8CAM3D,MAAO,CACLF,WAAYmB,EACZlB,aAAcA,EACdC,gBAAiBA,EACjBC,YAAaF,GAAgBC,IA2BjC,OARAoB,EAAAA,EAAAA,YAAU,WACJlB,EAASJ,WAAWF,MACtBU,EAAce,QAAQR,MAAQX,EAASJ,WAAWF,MACzCM,EAASJ,WAAWD,WAC7BW,EAAiBa,QAAQR,MAAQX,EAASJ,WAAWD,YAEtD,CAACK,EAASJ,aAGX,gCACE,gBAAC,IAAD,KACE,sCAEF,uBAAKwB,UAAU,oBACb,sBAAIA,UAAU,2BAAd,QACA,wBAAMA,UAAU,2BACd,uBAAKA,UAAU,2BACb,yBAAOA,UAAU,kBAAkBC,QAAQ,eAA3C,QAEE,yBACEC,UAAQ,EACRC,KAAK,QACLd,KAAK,QACLe,GAAG,cACHJ,UAAU,kBACVT,MAAOX,EAASN,MAChB+B,SAAUlB,KAGd,qBAAGmB,IAAKtB,EAAeO,MAAOX,EAASJ,WAAWF,OAAS,GAAI0B,UAAU,mBACxEpB,EAASJ,WAAWF,QAGvB,uBAAK0B,UAAU,2BACb,yBAAOA,UAAU,kBAAkBC,QAAQ,kBAA3C,SAEE,yBACEC,UAAQ,EACRC,KAAMrB,EAAoB,OAAS,WACnCO,KAAK,WACLe,GAAG,iBACHJ,UAAU,kBACVT,MAAOX,EAASL,SAChB8B,SAAUlB,IAEZ,gBAAC,IAAD,CAAiBoB,KAAMzB,EAAoB0B,EAAAA,GAAaC,EAAAA,IAAOC,QAjG1C,WAC/B3B,GAAsBD,OAkGd,qBAAGwB,IAAKpB,EAAkBK,MAAOX,EAASJ,WAAWD,UAAY,GAAIyB,UAAU,mBAC5EpB,EAASJ,WAAWD,WAGzB,0BAAQ4B,KAAK,SAASQ,UAAW/B,EAASD,YAAa+B,QA3D5C,SAACtB,GAClBA,EAAEwB,iBAPF/B,EAAY,OAAD,UACND,EADM,CAETD,YAAaC,EAASH,cAAgBG,EAASF,mBAOjDmC,eAAeC,QAAQ,kBAAkB,GACzCD,eAAeC,QAAQ,YAAalC,EAASN,QAC7CyC,EAAAA,EAAAA,UAAS,cAsDyEf,UAAU,oBAAtF,c,4DClHV,UARkB,WAChB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD","sources":["webpack://sum-app/./src/components/LoginForm/LoginForm.jsx","webpack://sum-app/./src/pages/login.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport Helmet from \"react-helmet\";\r\nimport {navigate} from \"gatsby\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEye, faEyeSlash} from '@fortawesome/free-solid-svg-icons'\r\nimport './loginform.scss';\r\n\r\nconst LoginForm = () => {\r\n  const [userData, setUserData] = useState({\r\n    email: '',\r\n    password: '',\r\n    formErrors: {\r\n      email: '', \r\n      password: ''\r\n    },\r\n    isEmailValid: false,\r\n    isPasswordValid: false,\r\n    isFormValid: false\r\n  });\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const errorEmailRef = useRef();\r\n  const errorPasswordRef = useRef();\r\n\r\n  const handlePasswordVisibility = () => {\r\n    setIsPasswordVisible(!isPasswordVisible);\r\n  }\r\n\r\n  const handleUserInput = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    const validationResults = validateInput(name, value);\r\n    setUserData({...userData, [name]: value, ...validationResults});\r\n  }\r\n\r\n  const validateInput = (inputName, value) => {\r\n    const inputValidationErrors = userData.formErrors;\r\n    let isEmailValid = userData.isEmailValid;\r\n    let isPasswordValid = userData.isPasswordValid;\r\n\r\n    switch(inputName) {\r\n      case 'email':\r\n        isEmailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n        inputValidationErrors.email = isEmailValid ? '' : 'Введите корректный email';\r\n        break;\r\n      case 'password':\r\n        isPasswordValid = value.length >= 6;\r\n        inputValidationErrors.password = isPasswordValid ? '': 'Пароль должен содержать не менее 6 символов';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return {\r\n      formErrors: inputValidationErrors,\r\n      isEmailValid: isEmailValid,\r\n      isPasswordValid: isPasswordValid,\r\n      isFormValid: isEmailValid && isPasswordValid\r\n    };\r\n  }\r\n\r\n  const validateForm = () => {\r\n    setUserData({\r\n      ...userData,\r\n      isFormValid: userData.isEmailValid && userData.isPasswordValid\r\n    });\r\n  }\r\n\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    validateForm();\r\n    sessionStorage.setItem('isUserLoggedIn', true);\r\n    sessionStorage.setItem('userEmail', userData.email);\r\n    navigate(\"/addition\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (userData.formErrors.email) {\r\n      errorEmailRef.current.value = userData.formErrors.email\r\n    } else if (userData.formErrors.password) {\r\n      errorPasswordRef.current.value = userData.formErrors.password\r\n    }\r\n  }, [userData.formErrors])\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Вход</title>\r\n      </Helmet>\r\n      <div className=\"app-page-wrapper\">\r\n        <h3 className=\"app-page-wrapper__title\">Вход</h3>\r\n        <form className=\"app-form app-form_login\">\r\n          <div className=\"app-form__field-wrapper\">\r\n            <label className=\"app-form__label\" htmlFor=\"input-email\">\r\n              Логин\r\n              <input\r\n                required\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"input-email\" \r\n                className=\"app-form__input\"\r\n                value={userData.email}\r\n                onChange={handleUserInput}\r\n            />\r\n            </label>\r\n            <p ref={errorEmailRef} value={userData.formErrors.email || ''} className=\"app-form__error\">\r\n            {userData.formErrors.email}\r\n            </p>\r\n          </div>\r\n          <div className=\"app-form__field-wrapper\">\r\n            <label className=\"app-form__label\" htmlFor=\"input-password\">\r\n              Пароль\r\n              <input\r\n                required\r\n                type={isPasswordVisible ? \"text\" : \"password\"}\r\n                name=\"password\"\r\n                id=\"input-password\"\r\n                className=\"app-form__input\"\r\n                value={userData.password}\r\n                onChange={handleUserInput}\r\n              />\r\n              <FontAwesomeIcon icon={isPasswordVisible ? faEyeSlash : faEye} onClick={handlePasswordVisibility} />\r\n            </label>\r\n            <p ref={errorPasswordRef} value={userData.formErrors.password || ''} className=\"app-form__error\">\r\n              {userData.formErrors.password}\r\n              </p>\r\n          </div>\r\n          <button type=\"button\" disabled={!userData.isFormValid} onClick={submitForm} className=\"app-form__submit\">Войти</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LoginForm","import * as React from \"react\";\r\nimport Layout from \"../components/Layout/Layout\";\r\nimport LoginForm from \"../components/LoginForm/LoginForm\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <Layout>\r\n      <LoginForm />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default LoginPage;"],"names":["useState","email","password","formErrors","isEmailValid","isPasswordValid","isFormValid","userData","setUserData","isPasswordVisible","setIsPasswordVisible","errorEmailRef","useRef","errorPasswordRef","handleUserInput","e","name","target","value","validationResults","validateInput","inputName","inputValidationErrors","match","length","useEffect","current","className","htmlFor","required","type","id","onChange","ref","icon","faEyeSlash","faEye","onClick","disabled","preventDefault","sessionStorage","setItem","navigate"],"sourceRoot":""}